{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Suffixtree","body":"#Suffix Tree\r\n\r\nA Java implementation of Ukkonen's suffix tree creation algorithm capable \r\nof creating a generalized suffix tree.\r\n\r\nYou will need to be familiar with Ukkonen's algorithm and suffix trees in\r\ngeneral. Most of this library is based on this [Stack Overflow answer](http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english) \r\n\r\nThis implementation is generic which allows the user to supply a custom\r\ncharacter and word type.\r\n\r\nThe tree should perform linearly with regard to the length of the string / \r\nstrings being added to it.\r\n\r\n##Design\r\n###Main Classes\r\n`SuffixTree`\r\n*\tHolds the root `Node`.\r\n*\tHolds the master `Sequence`.\r\n*\tMost of the state of the whole tree.\r\n\r\n`Node`\r\n*\tRepresents a branch within a tree.\r\n*\tHolds a collection of child `Edge`s.\r\n*\tCan iterate over is children E.g.\r\n\r\n```java\r\nNode node = tree.getRoot();\r\nfor(Edge edge : node){\r\n    System.out.println(edge);\r\n}\r\n```\r\n\r\n`Edge`\r\n* Represents an edge within a tree.\r\n* Can iterate over its length.\r\n\r\n\r\n`Sequence`\r\n\r\n`SequenceTerminal`\r\n\r\n`Suffix`\r\n\r\n##Notes\r\nSuffixTree.toString return a .dot file with the tree structure represented \r\nwithin it. \r\nTo view these files use [Graph Viz](http://www.graphviz.org/)","tagline":"A java implementation of Ukkonen's suffix tree construction algorithm.","google":""}